{%- if product.selling_plan_groups.size > 0 -%}
  {%- comment -%} Shorthand Variables {%- endcomment -%}
  {%- liquid
    assign currentVariant = variant | default: product.selected_or_first_available_variant
    assign requiresPlan = product.requires_selling_plan
    assign selectedAllocation = product.selected_or_first_available_selling_plan_allocation
    assign currentAllocations = currentVariant.selling_plan_allocations
  -%}
  {%- comment -%} Buy Box Styles {%- endcomment -%}
  <style type="text/css">
    .rtx-subscription-box {
      display: none;
    }
    .rtx-subscription-box.is-visible {
      display: block;
    }
    .rtx-gift-box {
      display: none;
    }
    .rtx-gift-box.is-visible {
      display: block;
    }
  
  
  /* new CSS  */
    .clear_svg {
      margin-top: 2px;
      margin-left: 6px;
      margin-right: 10px;
    }
    .clear_tag {
      font-weight: 400;
      color: #1F2322;
      margin: 0 auto !important;
      padding: 0px 12.5px;
    }
    .rtx-tooltip__flex{
      display: flex;
    }
    .one_sub_text {
      color: rgba(0,0,0,0.4);
      margin: 0;
      font-size: 12px !important;
      margin-left: 33px;
      margin-top: 5px;
    }
    .rtx_sub_container {
      margin-left: 35px;
      margin-bottom: 40px;
    }
    .rtx_option_heading {
      font-size: 18px;
      font-family: inter,sans-serif;
      font-style: normal;
      font-weight: 300;
      letter-spacing: 0;
      line-height: 1.5em;
    }
    .rtx_option_plans {
      margin-bottom: 15px
    }
    .rtx_option_subheading {
      font-size: .875rem;
      line-height: 1.428572;
      width: 90%;
      margin-left: 28px;
      margin-top: 4px;
    }
    .rtx_option {
      margin-top: 10px;
      width: fit-content;
    }
    input[type='radio'] {
      float: left;
      appearance: none;
      margin-top: 3px;
      margin-right: 10px;
      background: transparent !important;
      border: 2px solid #000;
      border-radius: 100%;
      content: " ";
      height: 1.75rem;
      width: 1.7rem;
    }
    input[type='radio']:before {
      content: '';
      display: block;
      width: 70%;
      height: 70%;
      margin: 15% auto;
      border-radius: 50%;
    }
    input[type='radio']:checked {
      background: white;
      -webkit-box-shadow: inset 0 0 1 8px black;
    }
    input[type='radio']:checked:before {
      background: black;
    }
    .clear_button{
      cursor: pointer;
      position: relative;
      margin-left: 7px;
      margin-top: 4px;
      background: #C6DB76;
      border-radius: 14px;
      padding: 0px;
      animation: gradient 3s ease infinite;
      background-size: 400% 400%;
      display: flex;
      width: 100%;
      white-space: nowrap;
    }
    .rtx_text {
      position: absolute;
      left: 160px;
      bottom: -155px;
      background:	#696969;
      font-size: 12px;
      z-index: 2;
      padding: 10px 10px 10px 10px;
      border-radius: 10px;
      min-width: 338px;
      color: white;
    }
    .rtx_popup_content {
      display: none;
      position: relative;
    }
    .rtx_popup {
      width: fit-content;
    }
    .rtx_sub_script {
      margin-left: 45px;
      width: fit-content;
      font-size: small;
    }
    .rtx_question_icon {
      margin-top: -2px;
      position: absolute;
      margin-left: 19px;
    }
    .clear_button:hover ~ .rtx_popup_content {
      display: inline !important;
    }
    .clear_tag .save24{
      color: #1F2322;
      font-weight: 400;
      font-size: 12px;
    }
    @media only screen and (max-width: 500px) {
      .rtx-tooltip__flex{
        flex-direction: column;
      }
      .clear_button {
         margin-left: 0;
      }
    }
  </style>
  
  <div data-rtx-subscription-{{ product.id }}-{{ section.id }}-{{ block.id }}>
    {%- comment -%} Subscription type toggle {%- endcomment -%}
    {%- unless requiresPlan -%}
      <div>
        <div class="rtx_option_selector">
          <input type="radio" id="purchaseTypeOneTime" name="purchaseType" value="purchaseTypeOneTime" {% if selectedAllocation == blank %} checked {% endif %} >
          <label for="purchaseTypeOneTime" class="rtx_option_label">
              <div class="rtx_option_heading">
                One-Time Purchase 
                <span class="rtx_one_time_price js-rtx_one_time_price">{{ product.selected_or_first_available_variant.price | money_without_trailing_zeros }}</span>
              </div>
          </label>
        </div>
        <div id="rtx_sands_block">
          <div id="rtx_option_sub">
            <div class="rtx_option_selector">
              <input type="radio" id="purchaseTypeSbubscription" name="purchaseType" value="purchaseTypeSubscription" {% if selectedAllocation != blank %} checked {% endif %}>
              <label for="purchaseTypeSbubscription" class="rtx_option_label">
                <div class="rtx-tooltip__flex">
                  <div class="rtx_option_heading">
                    Subscribe
                    <div class="Multi_Price">
                      <span class="rtx_one_time_price"><s class="js-rtx_one_time_price">{{ product.selected_or_first_available_variant.price | money_without_trailing_zeros }}</s></span>
                      <span id="rtx_one_price_save" class="js-subscription-price">
                        {{- currentAllocations[0].price | money_without_trailing_zeros -}}
                      </span>
                    </div>
                  </div>
                  <div class="product__rtx-tooltip">
                    <div class="rtx_popup">
                      <div class="clear_button">
                        <p class="clear_tag"><span class="save24">Save 24%</span></p>
                      </div>
                      <div class="rtx_popup_content">
                        <blockquote class="rtx_text">
                          <p>You’re the boss.</p>
                          <p>
                            ✓ Free Shipping<br>
                            ✓ 30 Day Guarantee<br>
                            ✓ Cancel after your first order or make it a habit
                          </p>
                        </blockquote>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="Subscribe_Info">
                  <div class="rtx_sub_container">
                    {% assign my_fields = product.selected_or_first_available_variant.metafields.custom %}
                    {% for block in section.blocks %}
                      {%- case block.type -%}
                        {%- when 'block' -%}
                          <div class="subscribe-item_info">
                            {%- if block.settings.purchase_type_img != blank -%}
                              <img src="{{ block.settings.purchase_type_img | img_url: 'master' }}">
                            {%- endif -%}
                            <div>
                              <p class="Label_Text js-label-text" data-cms-text="{{ block.settings.purchase_type_text }}">
                                {{ my_fields.subscription_text | default: block.settings.purchase_type_text }}
                              </p>
                              {%- if block.settings.purchase_type_subtext != blank -%}
                                <p class="Label_Sub_Text">{{ block.settings.purchase_type_subtext }}</p>
                              {%- endif -%}
                            </div>
                          </div>
                      {% endcase %}
                    {% endfor %}
                  </div>
                </div>
        
              </label>
            </div>
          </div>
      
        </div>
      </div>
    {%- endunless -%}

  {%- comment -%} Subscription Box {%- endcomment -%}
    <div data-retextion-subscription-box class="rtx-subscription-box {% if requiresPlan or selectedAllocation != blank %} is-visible{% endif %}">
  
      <select name="selling_plan">
        {%- liquid
          for allocation in currentAllocations
            assign plan = allocation.selling_plan
            echo '<option'
            if plan.selected or sellectedAllocation == blank and forloop.first
              echo ' selected'
            endif
            echo ' value="' | append: plan.id | append: '">'
            echo plan.name | escape
            echo '</option>'
          endfor
        -%}
      </select>
  
      {%- comment -%} Subscription Gift Box Toggle {%- endcomment -%}
      <div>
        <input id="subscriptionGift" type="checkbox" name="properties[_gifted-subscription]">
        <label for="subscriptionGift"><span>SEND BUOY AS A GIFT</span> or</label>
      </div>
      {%- comment -%} Gift Box {%- endcomment -%}
  
      <div data-retextion-gift-box class="rtx-gift-box">
        <div>
          <label for="subscriptionEmail">Recipient's Email</label>
          <input id="subscriptionEmail" type="email" name="properties[Gift Recipient Email]">
        </div>
        <div>
          <label for="subscriptionName">Recipient's Name</label>
          <input id="subscriptionName" type="text" name="properties[Gift Recipient Name]">
        </div>
        <div>
          <label for="subscriptionMessage">Gift Message</label>
          <textarea id="subscriptionMessage" name="properties[Gift Message]" maxlength="1024"></textarea>
        </div>
        <p>You will provide the shipping information during checkout.</p>
      </div>
 
      {%- comment -%} Selling Plan Options {%- endcomment -%}
  
    </div>
  
  </div>

<script type="text/javascript">
  ((api) => { 
  const boxId = "{{ product.id }}-{{ section.id }}-{{ block.id }}";
  const boxProduct = {{ product | json }};
  const elementRoot = document.querySelector('[data-rtx-subscription-' + boxId + ']');
  const productForm = elementRoot.closest('form[action="/cart/add"]') || elementRoot.closest('form') || document.querySelector('form[action="/cart/add"]') || document.documentElement;
  const elementSubscriptionBox = productForm.querySelector('[data-retextion-subscription-box]');
  const elementGiftBox = elementRoot.querySelector('[data-retextion-gift-box]');
  const elementGiftCheckbox = productForm.querySelector('[name="properties[_gifted-subscription]"]');
  const elementSellingPlan = productForm.querySelector('[name="selling_plan"]');
  const elementQuantitySelector = productForm.querySelector('[name="quantity"]');
  const elementsPurcahseTypeRadio = productForm.querySelectorAll('[name="purchaseType"]');
  const elementsVariantSelectors = productForm.querySelectorAll('[name="id"]');
  const elementsInputs = productForm.querySelectorAll('button, input, textarea, select, option, data-list, optgroup ');
  const sellingPlan = productForm.querySelector('[name="selling_plan"]');
  let selectedVariantId = {{ currentVariant.id | json }};
  const queryParamsGet = () => {
    let [origin, searchAndHash] = window.location.toString().split('?');
    searchAndHash = searchAndHash || "";
    let [search] = searchAndHash.split('#');
    return (search || '').split('&').reduce((o, e) => {
      let [key, value] = e.split('=').map(x =>
        decodeURIComponent(x));
        if (!key || !value) return o;
        o[key] = value;
      return o;
    }, {});
  };
    const queryParamsGenerate = (qp) => { 
      qp = qp || {};
      //Remove undefined
      Object.keys(qp).forEach(key => {
        if (typeof qp[key] !== typeof undefined) return;
        delete qp[key];
      });
      return Object.keys(qp).reduce((x, key, i) => {
        let value = qp[key];
        if (i != 0) x += '&';
        return x += encodeURIComponent(key) + '=' + encodeURIComponent(value);
      }, '');
    };
    const subscriptionBoxHide = () => {
      elementSubscriptionBox.classList.remove('is-visible');
    };
    const subscriptionBoxShow = () => {
      sellingPlan.disabled = false;
      elementSubscriptionBox.classList.add('is-visible');
    };
    const subscriptionGiftShow = () => {
      elementGiftBox.classList.add('is-visible');
    };
    const subscriptionGiftHide = () => {
      elementGiftBox.classList.remove('is-visible');
    };
    const sellingPlanQueryUpdate = () => {
      const queryParams = queryParamsGet();
      if (elementSubscriptionBox.classList.contains('is-visible')) {
        queryParams['selling_plan'] = sellingPlanSelectionGet() || undefined;
      } else {
        delete queryParams['selling_plan'];
      }
      const qs = queryParamsGenerate(queryParams);
      try {
        let hash;
        hash = (hash = window.location.toString().split('#')).length > 1 ? hash[1] : null;
        const url = window.location.toString().split('?')[0] + '?' + qs + (hash ? '#' + hash : '');
        history.pushState(queryParams, '', url);
      } catch (e) {
        // Catching since older browsers and iOS can have issues
        console.error(e);
      }
    };
    const sellingPlanSelectionGet = () => {
      return parseInt(elementSellingPlan.value);
    };
    const sellingPlanSelectionSet = (sellingPlan) => {
      sellingPlan = sellingPlan && sellingPlan.id ? sellingPlan.id : sellingPlan;
      elementSellingPlan.value = sellingPlan.toString();
    };
    const sellingPlanPropertiesGet = () => {
      const formData = new FormData(productForm);
      return Array.from(formData.entries());
    };
    const sellingPlanUrlGenerate = () => {
      const props = sellingPlanPropertiesGet();
      let strProperties = '';
      sellingPlanPropertiesGet().forEach(prop => {
        const key = prop[0];
        if (!key.startsWith('properties[')) return;
        const val = prop[1];
        if (!val || !val.toString().length) return;
        strProperties += '&items[][' + encodeURIComponent(key) + '] = ' + encodeURIComponent(val);
      });
      return window.location.origin + '/cart/clear?return_to=' + encodeURIComponent('/cart/add' + '?items[][id]=' + selectedVariantId + '&items[][quantity]=' + (elementQuantitySelector ? elementQuantitySelector.value : 1) + strProperties + '&items[][selling_plan]=' + sellingPlanSelectionGet() + '&return_to=/checkout');
    };
    const sellingPlanUpdate = () => {
      sellingPlanQueryUpdate();
      console.log(sellingPlanUrlGenerate());
    };
    const sellingPlanUpdateVariant = () => {
      const variant = (boxProduct.variants.find(v => v.id == selectedVariantId) || boxProduct.variants.find(v => v.available) || boxProduct.variants[0] );
      let newOptions = '';
      // Determine the selected option
      let selected = sellingPlanSelectionGet();
      if (!variant.selling_plan_allocations.some(spa => {
        return spa.selling_plan_id == selected;
      })) {
        selected = variant.selling_plan_allocations[0].selling_plan_id;
      }
      // Generate new options
      variant.selling_plan_allocations.forEach((spa, i) => {
        const sellingGroup = boxProduct.selling_plan_groups.find(spg => spg.id === spa.selling_plan_group_id);
        const sellingPlan = sellingGroup.selling_plans.find(sp => sp.id === spa.selling_plan_id);
        const opt = document.createElement('option');
        if (sellingPlan.id == selected) {
          opt.setAttribute('selected', 'selected');
        }
        opt.value = sellingPlan.id;
        opt.textContent = sellingPlan.name;
        newOptions += opt.outerHTML;
      });
      // Update select
      elementSellingPlan.innerHTML = newOptions;
      sellingPlanUpdate();
    };
    // Event Listeners
    elementsPurcahseTypeRadio.forEach(el => {
      el.addEventListener('change', e => {
        let elValue = el.value;
        let mainProductButton = document.querySelector('.js-mainproduct-submit'),
            stickyButton = document.querySelector('.js-sticky-add-to-cart');
        let variantJson = JSON.parse(document.querySelector("#js-product-variant-json").innerText),
            currentVariant = productForm.id.value;
        if (el.value === 'purchaseTypeSubscription') {
          subscriptionBoxShow();
          sellingPlan.disabled = false;
          document.querySelector('.js-sticky-subscription-btns input[value="subscription"]').checked = true;
          if(mainProductButton.dataset.available == "true"){
            mainProductButton.innerHTML = `Add to Cart —&nbsp; ${variantJson[currentVariant].subscription_price}`;
            stickyButton.innerHTML = `Add to Cart —&nbsp; ${variantJson[currentVariant].subscription_price}`;
          }
        } else {
          subscriptionBoxHide();
          sellingPlan.disabled = true;
          document.querySelector('.js-sticky-subscription-btns input[value="one-time"]').checked = true;
          
          if(mainProductButton.dataset.available == "true"){
            mainProductButton.innerHTML = `Add to Cart —&nbsp; ${variantJson[currentVariant].price}`;
            stickyButton.innerHTML = `Add to Cart —&nbsp; ${variantJson[currentVariant].price}`;
          }
        }
        elementGiftBox.querySelectorAll('[name*="properties"]').forEach(input => {
          input.disabled = (elValue != 'purchaseTypeSubscription');
        })
        sellingPlanUpdate();
      });
    }); 
    elementGiftCheckbox.addEventListener('change', e => {
      if (e.target.checked) {
        subscriptionGiftShow();
      } else {
        subscriptionGiftHide();
      }
      sellingPlanUpdate();
    }); 
    elementSellingPlan.addEventListener('change', e => {
      sellingPlanUpdate();
    }); 
    elementsVariantSelectors.forEach(vs => {
      vs.addEventListener('change', e => {
        selectedVariantId = e.target.value;
        sellingPlanUpdateVariant();
      });
    });
    elementsInputs.forEach(inp => {
      inp.addEventListener('change', e => { 
        sellingPlanUpdate();
      });
    });
    // Public API
    return Object.assign(api, {
      [boxId]: {
        boxId,
        boxProduct,
        subscriptionBoxHide,
        subscriptionBoxShow,
        subscriptionGiftShow,
        subscriptionGiftHide,
        sellingPlanUrlGenerate
      }
    });
  })((window.retextionBuyBox = {}));
  </script>
  
{%- endif -%}
