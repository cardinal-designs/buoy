{{ 'section-product-bar.css' | asset_url | stylesheet_tag }}
{{ 'section-pee-club-product-bar.css' | asset_url | stylesheet_tag }}


<div class="hide-mobile product-bar product-bar-toggle pee-club-product-bar">
  <div class="page-width">
    <div class="product-bar__container">
  
      <div class="flex-buttons-bar">
        <h5>{{ section.settings.title }}</h5>
        {% if section.settings.check1 != blank %}
          <p>{% render 'icon-checkmark' %} {{ section.settings.check1 }}</p>
        {% endif %}
        {% if section.settings.check2 != blank %}
          <p>{% render 'icon-checkmark' %} {{ section.settings.check2 }}</p>
        {% endif %}
        {% if section.settings.check3 != blank %}
          <p>{% render 'icon-checkmark' %} {{ section.settings.check3 }}</p>
        {% endif %}
      </div>
      <div class="pee-club-product-bar-buttons">
        <div class="pee-club-product-bar-dropdown" style="width:240px;">
        <select>
          {% for block in section.blocks %}
          {% assign product = all_products[block.settings.product] %}
            <option data-id="{{ forloop.index }}" value="{{ forloop.index0 }}">{{ product.title }}<span>{{ block.settings.text }}</span></option>
          {% endfor %}
        </select>
        </div>
        {% for block in section.blocks %}
        {% assign product = all_products[block.settings.product] %}
        <button data-button="{{ forloop.index }}" style="{% if forloop.index == 1 %}display: block;{% endif %}" class="button js-add-to-cart" 
                {% if product.selected_or_first_available_variant.available == false %}disabled{% endif %}
                data-id="{{ product.selected_or_first_available_variant.id }}" 
                data-time="one-time">

          {% if product.selected_or_first_available_variant.available == false %}
          <span>Sold Out</span>
          {% else %}
          <span>Get Started</span> â€” 
            <span data-id="{{product.variants[0].selling_plan_allocations[0].price_adjustments[0].price | json }}" class="hide-mobile">{{product.variants[0].selling_plan_allocations[0].price_adjustments[0].price | money_without_trailing_zeros }}
              <span class="discount-price">{{ product.price | money_without_trailing_zeros }}</span>
            </span>
          {% endif %}
        </button>
        {% endfor %}
      </div>
      </div>
    </div>
  </div>

{% javascript %}
  $(window).scroll(function() {
    var $scrollTop = $(window).scrollTop();
      var scrollToSectionOffset = $('.show-product-bar');
    if ( $(window).width() > 768 ) {
      if ($scrollTop > (scrollToSectionOffset.offset().top)) {
        $('.product-bar').addClass('scrolled');
      } else {
        $('.product-bar').removeClass('scrolled');
      }
    } else {
      if ($scrollTop > 1200) {
        $('.product-bar').addClass('scrolled');
      } else {
        $('.product-bar').removeClass('scrolled');
      }
	}
  });



  var x, i, j, l, ll, selElmnt, a, b, c;
  /* Look for any elements with the class "custom-select": */
  x = document.getElementsByClassName("custom-select");
  l = x.length;
  for (i = 0; i < l; i++) {
    selElmnt = x[i].getElementsByTagName("select")[0];
    ll = selElmnt.length;
    /* For each element, create a new DIV that will act as the selected item: */
    a = document.createElement("DIV");
    a.setAttribute("class", "select-selected");
    a.innerHTML = selElmnt.options[selElmnt.selectedIndex].innerHTML;
    x[i].appendChild(a);
    /* For each element, create a new DIV that will contain the option list: */
    b = document.createElement("DIV");
    b.setAttribute("class", "select-items select-hide");
    for (j = 1; j < ll; j++) {
      /* For each option in the original select element,
      create a new DIV that will act as an option item: */
      c = document.createElement("DIV");
      c.innerHTML = selElmnt.options[j].innerHTML;
      c.addEventListener("click", function(e) {
          /* When an item is clicked, update the original select box,
          and the selected item: */
          var y, i, k, s, h, sl, yl;
          s = this.parentNode.parentNode.getElementsByTagName("select")[0];
          sl = s.length;
          h = this.parentNode.previousSibling;
          for (i = 0; i < sl; i++) {
            if (s.options[i].innerHTML == this.innerHTML) {
              s.selectedIndex = i;
              h.innerHTML = this.innerHTML;
              y = this.parentNode.getElementsByClassName("same-as-selected");
              yl = y.length;
              for (k = 0; k < yl; k++) {
                y[k].removeAttribute("class");
              }
              this.setAttribute("class", "same-as-selected");
              break;
            }
          }
          h.click();
      });
      b.appendChild(c);
    }
    x[i].appendChild(b);
    a.addEventListener("click", function(e) {
      /* When the select box is clicked, close any other select boxes,
      and open/close the current select box: */
      e.stopPropagation();
      closeAllSelect(this);
      this.nextSibling.classList.toggle("select-hide");
      this.classList.toggle("select-arrow-active");
    });
  }
  
  function closeAllSelect(elmnt) {
    /* A function that will close all select boxes in the document,
    except the current select box: */
    var x, y, i, xl, yl, arrNo = [];
    x = document.getElementsByClassName("select-items");
    y = document.getElementsByClassName("select-selected");
    xl = x.length;
    yl = y.length;
    for (i = 0; i < yl; i++) {
      if (elmnt == y[i]) {
        arrNo.push(i)
      } else {
        y[i].classList.remove("select-arrow-active");
      }
    }
    for (i = 0; i < xl; i++) {
      if (arrNo.indexOf(i)) {
        x[i].classList.add("select-hide");
      }
    }
  }
  
  /* If the user clicks anywhere outside the select box,
  then close all select boxes: */
  document.addEventListener("click", closeAllSelect);
{% endjavascript %}

{% schema %}
  {
    "name": "Pee Club Product Bar",
    "class": "product-bar-wrapper",
    "settings": [
      {
        "type": "text",
        "id": "title",
        "label": "Title"
      },
      {
        "type": "text",
        "id": "check1",
        "label": "Check 1"
      },
      {
        "type": "text",
        "id": "check2",
        "label": "Check 2"
      },
      {
        "type": "text",
        "id": "check3",
        "label": "Check 3"
      }
	],
    "blocks": [
      {
        "type": "block",
        "name": "Block",
        "settings": [
          {
            "type": "product",
            "id": "product",
            "label": "Product"
          },
          {
            "type": "text",
            "id": "text",
            "label": "Text"
          }
        ]
      }
    ],
    "presets": [
      {
        "name": "Pee Club Product Bar"
      }
    ]
  }
{% endschema %}  





