<div class="cv_progress_section_pdp">
  <div class="heading_progress">
    <p>{{ section.settings.sub_heading }}</p>
    {{ section.settings.heading }}
  </div>
  <div class="progressBar_inner">
    <div class="progressbar" data-animate="false">
      <div class="circle" data-percent="64" data-count="64">
        <div class="digitsLyt"><st>64</st>%</div>
      </div>
      <div class="progres-bar-text">
        <p class="text_bar_progress">More Hydrating</p>
        <p class="text_bar_prog">Than Water Alone</p>
      </div>
    </div>

    <div class="progressbar" data-animate="false">
      <div class="circle" data-percent="49" data-count="49">
        <div class="digitsLyt"><st>49</st>%</div>
      </div>
      <div class="progres-bar-text">
        <p class="text_bar_progress">More Hydrating</p>
        <p class="text_bar_prog">Than Leading Electrolyte Competitor</p>
      </div>
    </div>

    <div class="progressbar" data-animate="false">
      <div class="circle" data-percent="100" data-count="10">
        <div class="digitsLyt">~<st>10</st>x</div>
      </div>
      <div class="progres-bar-text">
        <p class="text_bar_progress">Positive Fluid Balance</p>
        <p class="text_bar_prog">Increase Compared to Both</p>
      </div>
    </div>
  </div>

  <div class="progress_footer">
    <a href="javascript:void(0);" class="tabs-labels bodys js-clinical-openss" id="cv_clinical-drawer"
      >View Clinical Study</a
    >
    <p>*According to a university-led, crossover design clinical study</p>
  </div>
</div>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js"></script>
<script src="{{ 'circle_progress.js' | asset_url }}"></script>
<script src="scripts/index.js"></script>

<script>
  function initializeClinicalChartsnw(drawer) {
    const swipers = drawer.querySelectorAll("[data-swiper='chart-images']")
  
    if(!swipers) return
  
    swipers.forEach(s => {
      const options = {
        slidesPerView: 'auto',
        spaceBetween: 8,
        pagination: {
          el: '.swiper-pagination',
          clickable: true
        },
      }
      
      if(s.nextElementSibling.hasAttribute('data-swiper')) {
        const textSwiper = new Swiper( s.nextElementSibling, {
          slidesPerView: 1,
          effect: 'fade'
        })
  
        options.controller = {
          by: 'slide',
          control: textSwiper
        }
  
        const swiper = new Swiper(s, options) 
        
      }
    })
  }
  
  document.addEventListener("DOMContentLoaded", () => {
    const clinicalTrialDrawer = document.querySelector("#clinicalSideDrawer")
    if (clinicalTrialDrawer) {
      initializeClinicalChartsnw(clinicalTrialDrawer)
    }
  })  
  $(document).ready(function ($) {
    function animateElements() {
      $('.progressbar').each(function () {
        var elementPos = $(this).offset().top;
        var topOfWindow = $(window).scrollTop();
        var percent = $(this).find('.circle').attr('data-percent');
        var data_count = $(this).find('.circle').attr('data-count');
        var percentage = parseInt(percent, 10) / 100;
        var $digits = $(this).children('.circle').children('.digitsLyt').children('st');
        var animate = $(this).data('animate');

        // Check if the element is in the viewport (visible)
        if (elementPos < topOfWindow + $(window).height() - 30 && elementPos > topOfWindow) {
          // If not animated yet, trigger the animation
          if (!animate) {
            $(this).data('animate', true); // Set the flag to prevent re-triggering animation

            // Animate the circle progress
            $(this).find('.circle').circleProgress({
              startAngle: -Math.PI / 2,
              value: percentage,
              thickness: 5,
              fill: { color: '#DEF647' },
            });

            // Animate the digits from 0 to the target value
            var targetValue = parseInt(data_count, 10);
            $digits.each(function () {
              $(this).prop('Counter', 0).animate(
                {
                  Counter: targetValue,
                },
                {
                  duration: 1500, // Duration of animation in milliseconds
                  easing: 'swing',
                  step: function (now) {
                    $(this).text(Math.ceil(now)); // Update the text with the current number
                  },
                }
              );
            });
          }
        } else {
          // Reset animation flag when the element is out of view
          $(this).data('animate', false);
        }
      });
    }

    // Initial call to show animated elements
    animateElements();

    // Attach scroll event to check for visibility
    $(window).scroll(function () {
      animateElements();
    });
  });
</script>

<!--
  <script>
    $(document).ready(function ($) {
      function animateElements() {
        $('.progressbar').each(function () {
          var elementPos = $(this).offset().top;
          var topOfWindow = $(window).scrollTop();
          var percent = $(this).find('.circle').attr('data-percent');
          var percentage = parseInt(percent, 0) / 100;
          var animate = $(this).data('animate');

          // Check if the element is in the viewport
          if (elementPos < topOfWindow + $(window).height() - 30 && !animate) {
            $(this).data('animate', true);
            $(this)
              .find('.circle')
              .circleProgress({
                startAngle: -Math.PI / 2,
                value: percentage,
                thickness: 5,
                fill: {
                  color: '#DEF647',
                },
              });
          }
          // Reset the animation when it goes out of view
          else if (elementPos > topOfWindow + $(window).height() || elementPos < topOfWindow) {
            $(this).data('animate', false); // Reset the animate data
          }
        });
      }

      // Initial call to show animated elements
      animateElements();

      // Attach scroll event to check for visibility
      $(window).scroll(animateElements);
    });
  </script>
-->

<script>
  $(document).ready(function () {
    document.querySelector('.js-clinical-openss').addEventListener('click', function () {
      // Change the style to make right: 0px
      const clinicalDrawer = document.getElementById('clinicalSideDrawer');

      // Update CSS variables when opening the drawer
      document.documentElement.style.setProperty('--clinical-trial-padding-top', '0px');
      document.documentElement.style.setProperty('--clinical-trial-top', '84px');

      if (window.innerWidth <= 768) {
        // Apply bottom: 0px for mobile screens
        clinicalDrawer.style.bottom = '0px';
      } else {
        // Apply right: 0px for desktop screens
        clinicalDrawer.style.right = '0px';
      }

      // Add the class mobile-fixed-header to .drawer__header
      document.querySelector('.drawer__header').classList.add('mobile-fixed-header');
      document.body.classList.add('wp_popup_drawer');
      document.querySelector('.page-blury-overlay').classList.add('is-visibles');
    });

    // Revert changes on close button click
    document.querySelector('.js-clinical-close').addEventListener('click', function () {
      const clinicalDrawer = document.getElementById('clinicalSideDrawer');

      // Revert the styles
      clinicalDrawer.style.bottom = '';
      clinicalDrawer.style.right = '-100%';  // Removed the semicolon here

      // Remove the class mobile-fixed-header from .drawer__header
      document.querySelector('.drawer__header').classList.remove('mobile-fixed-header');
      document.body.classList.remove('wp_popup_drawer');
      document.querySelector('.page-blury-overlay').classList.remove('is-visibles');

      // Reset CSS variables when closing the drawer
      document.documentElement.style.setProperty('--clinical-trial-padding-top', '');
      document.documentElement.style.setProperty('--clinical-trial-top', '');
    });
  });
</script>

{% schema %}
{
  "name": "cv_progress_section_pdp",
  "settings": [
    {
      "type": "text",
      "id": "sub_heading",
      "label": "Sub Heading"
    },

    {
      "type": "richtext",
      "id": "heading",
      "label": "heading"
    }
  ],
  "presets": [
    {
      "name": "cv_progress_section_pdp"
    }
  ]
}
{% endschema %}
